{
  "openapi": "3.0.0",
  "servers": [],
  "info": {
    "description": "Documentation for the Tasksweeper API.",
    "version": "1.1.0",
    "title": "Tasksweeper API",
    "contact": {
      "email": "filipe3xf@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "Accounts of the users of the application"
    },
    {
      "name": "Task",
      "description": "Tasks of the users"
    }
  ],
  "paths": {
    "/task/{taskId}/failure": {
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Closes a task and punishes the user",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the task that the user wants to close"
          }
        ],
        "operationId": "deleteFailedTask",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the task that was removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Didn t insert a valid taskId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Task with id something does not exist."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Either not logged in an account, or tried to delete a task that belongs to another user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Not allowed to make changes to this task"
                    }
                  }
                },
                "examples": {
                  "JWT": {
                    "value": {
                      "error": "Error due to invalid credentials."
                    }
                  },
                  "Invalid Account": {
                    "value": {
                      "error": "The account username is trying to close a task from another account"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn t find a TaskId in the database that matched the one in the input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The desired element was not found in the database."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/task/{taskId}/success": {
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Closes a task and gives the user rewards.",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the task that the user wants to close"
          }
        ],
        "operationId": "deleteTask",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the task that was removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Didn t insert a valid taskId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Task with id something does not exist."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Either not logged in an account, or tried to delete a task that belongs to another user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Not allowed to make changes to this task"
                    }
                  }
                },
                "examples": {
                  "JWT": {
                    "value": {
                      "error": "Error due to invalid credentials."
                    }
                  },
                  "Invalid Account": {
                    "value": {
                      "error": "The account username is trying to close a task from another account"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn t find a TaskId in the database that matched the one in the input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The desired element was not found in the database."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Register user's new task.",
        "operationId": "postTask",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the newly created Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "One of the properties was incorrectly filled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Details about which property was unproperly filled"
                    }
                  }
                },
                "examples": {
                  "difficulty": {
                    "value": {
                      "error": "Difficulty 'difficulty' name does not exist! Please pick 'Easy', 'Medium' or 'Hard'."
                    }
                  },
                  "repetition": {
                    "value": {
                      "error": "Repetition named 'repetition' does not exist! Please pick 'Daily', 'Weekly', 'Monthly' or 'Yearly'."
                    }
                  },
                  "dueDatePast": {
                    "value": {
                      "error": "The following date 2012-10-01T06:10:25Z is before the actual date!"
                    }
                  },
                  "dueDateInvalid": {
                    "value": {
                      "error": "2032-13-01T06:10:25.000Z is not a valid timestamp."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "JWT is invalid."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTaskBody"
              }
            }
          },
          "description": "Account information to add."
        }
      }
    },
    "/api/documentation": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Get this documentation in JSON format.",
        "operationId": "getDocumentation",
        "responses": {
          "200": {
            "description": "The documentation in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openapi": {
                      "type": "string",
                      "example": "3.0.0"
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "example": "Documentation for the Tasksweeper API."
                        },
                        "title": {
                          "type": "string",
                          "example": "Tasksweeper API"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Hello, World!"
        ],
        "summary": "Hello, World!",
        "operationId": "helloWorld",
        "responses": {
          "200": {
            "description": "Hello, World!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Hello, World!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get the information of the current account.",
        "operationId": "getAccount",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The information of the account corresponding to the JWT.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "description": "JWT is invalid."
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register an account.",
        "operationId": "registerAccount",
        "description": "Registers a new account and returns a JWT that allows the user to start using the authentication required endpoints rightaway.",
        "responses": {
          "201": {
            "description": "Account sucessfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWT"
                }
              }
            }
          },
          "400": {
            "description": "Errors in the request body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "username": {
                    "value": {
                      "error": "The username 'username with spaces' is not valid."
                    }
                  },
                  "email": {
                    "value": {
                      "error": "The email 'invalidemail' is not valid."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Username or email already exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "user": {
                    "value": {
                      "error": "Key (username)=(username) already exists."
                    }
                  },
                  "email": {
                    "value": {
                      "error": "Key (email)=(username@somemail.com) already exists."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestBody"
              }
            }
          },
          "description": "Account information to add."
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Login an account.",
        "operationId": "loginAccount",
        "description": "Returns a JWT if the user successfully logs in.",
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWT"
                }
              }
            }
          },
          "401": {
            "description": "User's password is incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Login unsuccessful due to invalid credentials."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The desired element was not found in the database."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestBody"
              }
            }
          },
          "description": "Account information for the login."
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LoginRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "username"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "RegisterRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "username"
          },
          "email": {
            "type": "string",
            "example": "email"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "NewTaskBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Task name"
          },
          "difficultyName": {
            "type": "string",
            "example": "Easy/Medium/Hard"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Task description"
          },
          "dueDate": {
            "type": "object",
            "nullable": true,
            "properties": {
              "year": {
                "type": "string",
                "example": "2032"
              },
              "month": {
                "type": "string",
                "example": "10"
              },
              "day": {
                "type": "string",
                "example": "01"
              }
            }
          },
          "dueTime": {
            "type": "object",
            "nullable": true,
            "properties": {
              "hour": {
                "type": "string",
                "example": "06"
              },
              "minute": {
                "type": "string",
                "example": "10"
              },
              "second": {
                "type": "string",
                "example": "25"
              }
            }
          },
          "repetition": {
            "type": "string",
            "nullable": true,
            "example": "Daily/Weekly/Monthly/Yearly"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Task Name"
          },
          "startDate": {
            "type": "string",
            "example": "2021-05-22 16:03:30"
          },
          "dueDate": {
            "type": "string",
            "nullable": true,
            "example": "2032-10-01 06:10:25"
          },
          "difficultyName": {
            "type": "string",
            "example": "Easy/Medium/Hard"
          },
          "repetitionName": {
            "type": "string",
            "nullable": true,
            "example": "Daily/Weekly/Monthly/Yearly"
          },
          "accountName": {
            "type": "string",
            "example": "username"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Description of said task"
          }
        }
      },
      "JWT": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MjEyOTcyMDMsInVzZXJuYW1lIjoidXNlcm5hbWUifQ.XrCVqR18XFZL3J8w2PhVJ3igN96eKrZT3KL9h7kTYD8"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "username"
          },
          "email": {
            "type": "string",
            "example": "username@somemail.com"
          },
          "level": {
            "type": "number",
            "example": 1
          }
        }
      }
    }
  }
}